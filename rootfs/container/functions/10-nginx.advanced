# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: MIT

nginx_configure_authentication_basic() {
    print_notice "Setting Basic Authentication"
    user_num=$(printenv | sort | grep -c 'NGINX_AUTHENTICATION_BASIC_USER.*')
    for ((num = 1; num <= user_num; num++)); do
        transform_var file \
                            NGINX_AUTHENTICATION_BASIC_USER${num} \
                            NGINX_AUTHENTICATION_BASIC_PASS${num}
        basic_user=NGINX_AUTHENTICATION_BASIC_USER${num}
        basic_pass=NGINX_AUTHENTICATION_BASIC_PASS${num}
        print_warn "Creating User: ${!basic_user}"
        htpasswd -b -n ${!basic_user:-$NGINX_AUTHENTICATION_BASIC_USER} ${!basic_pass:-$NGINX_AUTHENTICATION_BASIC_PASS} >> /etc/nginx/snippets/authentication/basic-authorized_users
    done
}

nginx_configure_authentication_ldap() {
    transform_var file \
                        NGINX_AUTHENTICATION_LDAP_HOST \
                        NGINX_AUTHENTICATION_LDAP_PORT \
                        NGINX_AUTHENTICATION_LDAP_BASE_DN \
                        NGINX_AUTHENTICATION_LDAP_BIND_DN \
                        NGINX_AUTHENTICATION_LDAP_BIND_PW
    cat <<EOF > /etc/nginx/snippets/authentication/ldap-configuration
ldap_server ldapserver {
        url "${NGINX_AUTHENTICATION_LDAP_HOST}/${NGINX_AUTHENTICATION_LDAP_BASE_DN}?${NGINX_AUTHENTICATION_LDAP_ATTRIBUTE}?${NGINX_AUTHENTICATION_LDAP_SCOPE}?${NGINX_AUTHENTICATION_LDAP_FILTER}";
        binddn "${NGINX_AUTHENTICATION_LDAP_BIND_DN}";
        binddn_passwd ${NGINX_AUTHENTICATION_LDAP_BIND_PW};
        group_attribute ${NGINX_AUTHENTICATION_LDAP_GROUP_ATTRIBUTE};
        group_attribute_is_dn on;
        require valid_user;
        satisfy all;
    }
EOF
    ln -sf /etc/nginx/snippets/authentication/ldap-configuration /etc/nginx/snippets/server.enabled/
}

nginx_configure_authentication_llng() {
    print_notice "Setting LLNG Authentication"
    if var_true "${NGINX_ENABLE_UPSTREAM_KEEPALIVE}" ; then
        upstream_keepalive="keepalive ${NGINX_UPSTREAM_KEEPALIVE};"
    fi
    transform_var file \
                    NGINX_AUTHENTICATION_LLNG_HANDLER_HOST \
                    NGINX_AUTHENTICATION_LLNG_HANDLER_PORT
    llng_upstream_hosts=$(echo "${NGINX_AUTHENTICATION_LLNG_HANDLER_HOST}" | tr "," "\n")
    echo "upstream llng-upstream-pool {" >> /etc/nginx/snippets/authentication/llng-upstream
    echo "     ${upstream_keepalive}" >> /etc/nginx/snippets/authentication/llng-upstream
    for host in ${llng_upstream_hosts}; do
        if [[ ${host} != *":"* ]]; then
            llng_handler_listen_port=":${NGINX_AUTHENTICATION_LLNG_HANDLER_PORT}"
        else
            llng_handler_listen_port=""
        fi
        echo "    server $host${llng_handler_listen_port} ${NGINX_UPSTREAM_OPTIONS};" >> /etc/nginx/snippets/authentication/llng-upstream
    done
    echo "}" >> /etc/nginx/snippets/authentication/llng_upstream
    sed -i -e "/# Do not delete - Upstream Configuration/a\ \ \ \ include \/etc\/nginx\/snippets\/authentication\/llng_upstream;" /etc/nginx/nginx.conf
    sed -i -e "/# Do not delete - Upstream Configuration/a\ \ \ \ ### LLNG Authentication Multiple Handlers configuration" /etc/nginx/nginx.conf
    update_template /etc/nginx/snippets/authentication/llng-location_block \
                                                                            NGINX_AUTHENTICATION_LLNG_HANDLER_PORT \
                                                                            NGINX_AUTHENTICATION_LLNG_FASTCGI_BUFFER_SIZE \
                                                                            NGINX_AUTHENTICATION_LLNG_FASTCGI_BUFFERS

    if [ ! -f "/container/init/init.d/20-php-fpm" ]; then
        header_num=$(printenv | sort | grep -c '^NGINX_AUTHENTICATION_LLNG_ATTRIBUTE.*')
        for ((llngheader = 1; llngheader <= header_num; llngheader++)); do
            headers=NGINX_AUTHENTICATION_LLNG_ATTRIBUTE${llngheader}
            IFS=',' read -r -a array <<<"${!headers}"
            print_notice "Updating Nginx to support recieving attribute from LLNG: '${array[0]}'"
            echo "fastcgi_param ${array[0]} \$${array[1]};" >> /etc/nginx/snippets/authentication/llng-params
            echo "auth_request_set \$${array[1]} \$${array[2]};" >> /etc/nginx/snippets/authentication/llng-auth_request
        done
    else
        print_debug "Skipping LLNG Authentication configuration until configured by PHP-FPM"
    fi
}

nginx_configure_server_blockbots() {
    if var_true "${NGINX_ENABLE_BLOCK_BOTS}" ; then
        sed -i "/server_names_hash_bucket_size/d" /etc/nginx/nginx.conf
        sed -i "\|### Don't edit past here|a\ \ \ \ \  include /etc/nginx/snippets/blockbots/ddos.conf;" /etc/nginx/sites.available/*.conf
        if [ ! -f "/etc/nginx/snippets/blockbots-custom/bad-referrer-words.conf" ]; then
            cp -R /etc/nginx/snippets/blockbots/bad-referrer-words.conf /etc/nginx/snippets/blockbots-custom/
        fi
        if [ ! -f "/etc/nginx/snippets/blockbots-custom/blacklist-ips.conf" ]; then
            cp -R /etc/nginx/snippets/blockbots/blacklist-ips.conf /etc/nginx/snippets/blockbots-custom/
        fi
        if [ ! -f "/etc/nginx/snippets/blockbots-custom/blacklist-user-agents.conf" ]; then
            cp -R /etc/nginx/snippets/blockbots/blacklist-user-agents.conf /etc/nginx/snippets/blockbots-custom/
        fi
        if [ ! -f "/etc/nginx/snippets/blockbots-custom/custom-bad-referrers.conf" ]; then
            cp -R /etc/nginx/snippets/blockbots/custom-bad-referrers.conf /etc/nginx/snippets/blockbots-custom/
        fi
        if [ ! -f "/etc/nginx/snippets/blockbots-custom/whitelist-ips.conf" ]; then
            cp -R /etc/nginx/snippets/blockbots/whitelist-ips.conf /etc/nginx/snippets/blockbots-custom/
        fi
        if [ ! -f "/etc/nginx/snippets/blockbots-custom/whitelist-domains.conf" ]; then
            cp -R /etc/nginx/snippets/blockbots/whitelist-domains.conf /etc/nginx/snippets/blockbots-custom/
        fi
        if [ -d "/container/data/nginx/blockbots-custom" ] ; then
            print_notice "Detected Custom Bot Blocking configuration"
            cp -R /container/data/nginx/blockbots-custom/* /etc/nginx/snippets/blockbots-custom/
        fi

        if [ -n "${NGINX_BLOCK_BOTS_WHITELIST_DOMAIN}" ]; then
            whitelist_domains=$(echo "${NGINX_BLOCK_BOTS_WHITELIST_DOMAIN,,}" | tr "," "\n")
            for wl_domain in $whitelist_domains; do
                wl_domain_orig=${wl_domain}
                wl_domain="$(echo "$wl_domain" | sed "s|\\.|\\\.|g" | sed "s|-|\\\-|g")"
                if ! grep -q "${wl_domain_orig}" /etc/nginx/snippets/blockbots-custom/whitelist-domains.conf ; then
                    print_debug  "Adding '${wl_domain_orig}' domain to bot blocker whitelist"
                    echo '"~*(?:\b)'$(echo "$wl_domain")'(?:\b)" 0;' $(echo " # ${wl_domain_orig} automatically added on") $(date +"%Y-%m-%d-%H:%M:%S") >> /etc/nginx/snippets/blockbots-custom/whitelist-domains.conf
                elsebolster-zipping-tartly-swimsuit
                    print_debug "Skipping '${wl_domain_orig}' to be added to bot blocker domain whitelist"
                fi
            done
        fi

        if [ -n "${NGINX_BLOCK_BOTS_WHITELIST_IP}" ]; then
            whitelist_ips=$(echo "${NGINX_BLOCK_BOTS_WHITELIST_IP}" | tr "," "\n")
            for wl_ip in $whitelist_ips; do
                if ! grep -q "${wl_ip}" /etc/nginx/snippets/blockbots-custom/whitelist-ips.conf ; then
                    print_debug  "Adding IP: '${wl_ip}' to bot blocker whitelist"
                    echo "${wl_ip} 0; # Automatically added on $(date +"%Y-%m-%d-%H:%M:%S")" >> /etc/nginx/snippets/blockbots-custom/whitelist-ips.conf
                else
                    print_debug "Skipping IP: '${wl_ip}' from being added to bot blocker IP whitelist"
                fi
            done
        fi

        if [ -n "${NGINX_BLOCK_BOTS}" ] ; then
            if [[ "${NGINX_BLOCK_BOTS,}" == *"all" ]] ; then
                NGINX_BLOCK_BOTS=ALL
            fi

            IFS=","
            for bot in $NGINX_BLOCK_BOTS ; do
                case "${bot,,}" in
                    "all" )
                        nginx_block_bots="adidxbot,aolbuild,bingbot,bingpreview,DoCoMo,duckduckgo,facebookexternalhit,facebookplatform,AdsBot-Google,Googlebot,Googlebot-Image,Googlebot-Mobile,Googlebot-News,Googlebot/Test,Googlebot-Video,Google-HTTP-Java-Client,LinkedInBot,Gravityscan,Jakarta\\ Commons,Kraken/0.1,teoma,msnbot,msnbot-media,SAMSUNG,Slackbot,Slackbot-LinkExpanding,slurp,TwitterBot,Wordpress,yahoo"
                    ;;
                    "aol" )
                        nginx_block_bots="aolbuild,${nginx_block_bots}"
                    ;;
                    "bing" )
                        nginx_block_bots="bingbot,bingpreview,${nginx_block_bots}"
                    ;;
                    "docomo" )
                        nginx_block_bots="DoCoMo,${nginx_block_bots}"
                    ;;
                    "duckduckgo" )
                        nginx_block_bots="duckduckgo,${nginx_block_bots}"
                    ;;
                    "facebook" )
                        nginx_block_bots="developers.facebook.com,facebookexternalhit,facebookplatform,${nginx_block_bots}"
                    ;;
                    "google" )
                        nginx_block_bots="AdsBot-Google,Googlebot,Googlebot-Image,Googlebot-Mobile,Googlebot-News,Googlebot/Test,Googlebot-Video,Google-HTTP-Java-Client,${nginx_block_bots}"
                    ;;
                    "linkedin" )
                        nginx_block_bots="LinkedInBot,${nginx_block_bots}"
                    ;;
                    "misc" )
                        nginx_block_bots="adidxbot,Gravityscan,'Jakarta\ Commons',Kraken/0.1,teoma,${nginx_block_bots}"
                    ;;
                    "msn" )
                        nginx_block_bots="msnbot,msnbot-media,${nginx_block_bots}"
                    ;;
                    "samsung" )
                        nginx_block_bots="SAMSUNG,${nginx_block_bots}"
                    ;;
                    "slack" )
                        nginx_block_bots="Slackbot,Slackbot-LinkExpanding,${nginx_block_bots}"
                    ;;
                    "slurp" )
                        nginx_block_bots="slurp,${nginx_block_bots}"
                    ;;
                    "twitter" )
                        nginx_block_bots="TwitterBot,${nginx_block_bots}"
                    ;;
                    "wordpress" )
                        nginx_block_bots="Wordpress,${nginx_block_bots}"
                    ;;
                    "yahoo" )
                        nginx_block_bots="yahoo,${nginx_block_bots}"
                    ;;
                    * )
                        nginx_block_bots="${bot},${nginx_block_bots}"
                    ;;
                esac
            done

            NGINX_BLOCK_BOTS_BLACKLIST_USER_AGENTS="${nginx_block_bots}"
        fi

        if [ -n "${NGINX_BLOCK_BOTS_BLACKLIST_USER_AGENTS}" ]; then
            IFS=","
            for blacklist_ua in $NGINX_BLOCK_BOTS_BLACKLIST_USER_AGENTS; do
                blacklist_ua_orig="$(echo "$blacklist_ua" | sed "s|\\\||g")"
                if ! grep -q "${blacklist_ua_orig}" /etc/nginx/snippets/blockbots-custom/blacklist-user-agents.conf ; then
                    print_debug  "[botblock] Adding UA: '${blacklist_ua_orig}' to bot blocker blacklist"
                    echo '"~*(?:\b)'$(echo "$blacklist_ua")'(?:\b)" 3; # '${blacklist_ua_orig}' Automatically added on '$(date +"%Y-%m-%d-%H:%M:%S") >> /etc/nginx/snippets/blockbots-custom/blacklist-user-agents.conf
                else
                    print_debug "Skipping UA: '${blacklist_ua_orig}' from being added to bot blocker blacklist"
                fi
            done
        fi

        nginx_snippet server ${NGINX_ENABLE_BLOCK_BOTS} deny-botblocker.conf
    fi
}

nginx_configure_server_cache_open_file() {
    truefalse_onoff NGINX_CACHE_OPEN_FILE_ERRORS lowercase
    update_template /etc/nginx/snippets/server.available/cache-open_file.conf \
                                                                NGINX_CACHE_OPEN_FILE_ERRORS \
                                                                NGINX_CACHE_OPEN_FILE_INACTIVE \
                                                                NGINX_CACHE_OPEN_FILE_MAX \
                                                                NGINX_CACHE_OPEN_FILE_MIN_USES \
                                                                NGINX_CACHE_OPEN_FILE_VALID

    nginx_snippet server ${NGINX_ENABLE_CACHE_OPEN_FILE} cache-open_file.conf
}

nginx_configure_server_compression_brotli() {
    update_template /etc/nginx/snippets/server.available/compression-brotli.conf \
                                                                    NGINX_COMPRESSION_BROTLI_LEVEL \
                                                                    NGINX_COMPRESSION_BROTLI_MIN_LENGTH \
                                                                    NGINX_COMPRESSION_BROTLI_TYPES \
                                                                    NGINX_COMPRESSION_BROTLI_WINDOW

    nginx_snippet server ${NGINX_ENABLE_COMPRESSION_BROTLI} compression-brotli.conf
}

nginx_configure_server_compression_gzip() {
    truefalse_onoff NGINX_COMPRESSION_GZIP_VARY lowercase
    update_template /etc/nginx/snippets/server.available/compression-gzip.conf \
                                                                NGINX_COMPRESSION_GZIP_BUFFERS \
                                                                NGINX_COMPRESSION_GZIP_DISABLE \
                                                                NGINX_COMPRESSION_GZIP_HTTP_VERSION \
                                                                NGINX_COMPRESSION_GZIP_LEVEL \
                                                                NGINX_COMPRESSION_GZIP_MIN_LENGTH \
                                                                NGINX_COMPRESSION_GZIP_PROXIED \
                                                                NGINX_COMPRESSION_GZIP_TYPES \
                                                                NGINX_COMPRESSION_GZIP_VARY

    nginx_snippet server ${NGINX_ENABLE_COMPRESSION_GZIP} compression-gzip.conf
}

nginx_configure_server_ddos_protection() {
    update_template /etc/nginx/snippets/server.available/limit-ddos_protection.conf \
                                                                NGINX_DDOS_CONNECTIONS_PER_IP \
                                                                NGINX_DDOS_REQUESTS_PER_IP

    nginx_snippet server ${NGINX_ENABLE_DDOS_PROTECTION} limit-ddos_protection.conf
}

nginx_configure_server_fastcgi() {
    truefalse_onoff NGINX_ENABLE_FASTCGI_HTTPS lowercase
    sed -i "s|fastcgi_param .* HTTPS .*;|fastcgi_param  HTTPS ${NGINX_ENABLE_FASTCGI_HTTPS};|g" /etc/nginx/fastcgi_params

    fastcginum=$(printenv | sort | grep -cE '^FASTCGI([0-9].)_PARAM')
    for (( fastcgiparam = 01; fastcgiparam <= fastcginum; fastcgiparam++ )) ; do
        fastcgiparam=$(printf "%02d" $fastcgiparam)
        fastcgiparam_value=$(set -o posix ; set | grep ^FASTCGI${fastcgi_param}_PARAM= | cut -d = -f 2-)
        echo "fastcgi_param     $(echo "${fastcgiparam_value}" | cut -d , -f1})  $(echo "${fastcgiparam_value}" | cut -d , -f2-})";
    done
}

nginx_configure_server_metrics() {
    NGINX_VERSION="$(nginx -V 2>&1 | head -n1 | cut -d / -f 2)"
    update_template /etc/nginx/snippets/metrics.conf \
                                                        NGINX_VERSION

    nginx_snippet server ${NGINX_ENABLE_METRICS} metrics.conf
}

nginx_configure_server_proxy_buffering() {
    truefalse_onoff NGINX_ENABLE_PROXY_BUFFERING lowercase
    update_template /etc/nginx/snippets/server.available/proxy-buffer.conf \
                                                                            NGINX_ENABLE_PROXY_BUFFERING \
                                                                            NGINX_PROXY_BUFFERS \
                                                                            NGINX_PROXY_BUFFER_SIZE \
                                                                            NGINX_PROXY_BUSY_BUFFERS_SIZE

    ln -sf /etc/nginx/snippets/server.available/proxy-buffer.conf /etc/nginx/snippets/server.enabled/
}

nginx_configure_server_resolver() {
    if [ -n "${NGINX_RESOLVER}" ]; then
        update_template /etc/nginx/snippets/server.available/resolver.conf \
                                                                                NGINX_RESOLVER

        ln -sf /etc/nginx/snippets/server.available/resolver.conf /etc/nginx/snippets/server.enabled/
    fi
}

nginx_configure_server_reverse_proxy() {
    update_template /etc/nginx/snippets/server.available/headers-proxy.conf \
                                                                NGINX_REAL_IP_HEADER \
                                                                NGINX_SET_REAL_IP_FROM

    nginx_snippet server ${NGINX_ENABLE_REVERSE_PROXY} headers-proxy.conf
}

nginx_configure_server_tokens() {
    if var_false "${NGINX_ENABLE_SERVER_TOKENS}"; then
        ln -sf /etc/nginx/snippets/server.available/headers-server.conf /etc/nginx/snippets/server.enabled/
    fi

    truefalse_onoff NGINX_ENABLE_SERVER_TOKENS lowercase
    update_template /etc/nginx/snippets/server.available/tokens.conf \
                                                                        NGINX_ENABLE_SERVER_TOKENS

    ln -sf /etc/nginx/snippets/server.available/tokens.conf /etc/nginx/snippets/server.enabled/
}

nginx_configure_site_authentication() {
    local authentication_basic_include="sed -i \"/server {/a\ \ \ \ auth_basic '${NGINX_AUTHENTICATION_TITLE}';\n\ \ \ \ auth_basic_user_file /etc/nginx/snippets/authentication/basic-authorized_users;\" ${1}"
    local authentication_ldap_include="sed -i \"/server {/a\ \ \ \ auth_ldap '${NGINX_AUTHENTICATION_TITLE}';\n\ \ \ \ auth_ldap_servers ldapserver;\" ${1}"
    local authentication_llng_include="sed -i -e \"/server {/a\ \ \ include /etc/nginx/snippets/authentication/llng-location_block;\" -e \"/server {/a\ \ \  ### LLNG Authentication Checkpoint\" -e \"/location \/ {/a\ \ \ \ \ \ \ \ include /etc/nginx/snippets/authentication/llng-auth_request;\" -e \"/location \/ {/a\ \ \ \ \ \ \ \ ### LLNG Authentication handler\" ${1}"
    case "${NGINX_AUTHENTICATION_TYPE,,}" in
        "basic" )
            print_info "[configure_site] [${site}] Enabled Basic Authentication"
            print_warn "[configure_site] [${site}] [authentication] Using legacy variable / value - Convert to 'NGINX_${site^^}_AUTHENTICATION_TYPE'"
            eval "${authentication_basic_include}"
        ;;
        "ldap" )
            print_info "[configure_site] [${site}] Enabled LDAP Authentication"
            print_warn "[configure_site] [${site}] [authentication] Using legacy variable / value - Convert to 'NGINX_${site^^}_AUTHENTICATION_TYPE'"
            eval "${authentication_ldap_include}"
        ;;
        "llng" )
            print_info "[configure_site] [${site}] Enabled LLNG Authentication"
            print_warn "[configure_site] [${site}] [authentication] Using legacy variable / value - Convert to 'NGINX_${site^^}_AUTHENTICATION_TYPE'"
            eval "${authentication_llng_include}"
        ;;
    esac

    if [ -v NGINX_${site^^}_AUTHENTICATION_TYPE ] ; then
        local authentication_value="$(set -o posix ; set | grep "NGINX_${site^^}_AUTHENTICATION_TYPE=" | cut -d = -f 2)"
        case "${authentication_value,,}" in
            "basic" )
                print_info "[configure_site] [${site}] Enabled Basic Authentication"
                print_warn "[configure_site] [${site}] [authentication] Using legacy variable / value - Convert to 'NGINX_${site^^}_AUTHENTICATION_TYPE'"
                eval "${authentication_basic_include}"
            ;;
            "ldap" )
                print_info "[configure_site] [${site}] Enabled LDAP Authentication"
                print_warn "[configure_site] [${site}] [authentication] Using legacy variable / value - Convert to 'NGINX_${site^^}_AUTHENTICATION_TYPE'"
                eval "${authentication_ldap_include}"
            ;;
            "llng" )
                print_info "[configure_site] [${site}] Enabled LLNG Authentication"
                print_warn "[configure_site] [${site}] [authentication] Using legacy variable / value - Convert to 'NGINX_${site^^}_AUTHENTICATION_TYPE'"
                eval "${authentication_llng_include}"
            ;;
        esac
        unset blockbots_value
    fi
}

nginx_configure_site_blockbots() {
    local blockbots_link="ln -sf /etc/nginx/snippets/sites.available/blockbots.conf /etc/nginx/snippets/sites.enabled/${1}"
    local blockbots_remove="rm -rf /etc/nginx/snippets/sites.enabled/${1}/blockbots.conf/${1}/blockbots.conf"
    case "${NGINX_ENABLE_BLOCKBOTS,,}" in
        true )
            print_info "[configure_site] [${site}] Enabled Bot Blocking"
            print_warn "[configure_site] [${site}] [bot_blocking] Using legacy 'TRUE' value - Convert to 'NGINX_${site^^}_ENABLE_BLOCKBOTS'"
            eval "${blockbots_link}"
        ;;
        all )
            print_info "[configure_site] [${site}] Enabled Bot Blocking"
            print_debug "[configure_site] [${site}] [bot_blocking] Using 'all' value"
            eval "${blockbots_link}"
        ;;
        "${1}" )
            print_info "[configure_site] [${site}] Enabled Exploit protection"
            print_debug "[configure_site] [${site}] [bot_blocking] Using 'site' value"
            eval "${blockbots_link}"
        ;;
        none | false )
            eval "${blockbots_remove}"
        ;;
    esac

    if [ -v NGINX_${site^^}_ENABLE_BLOCKBOTS ] ; then
        local blockbots_value="$(set -o posix ; set | grep "NGINX_${site^^}_ENABLE_BLOCKBOTS=" | cut -d = -f 2)"
        case "${blockbots_value,,}" in
            true | all | ${1} )
                print_info "[configure_site] [${site}] Enabled Exploit protection"
                eval "${blockbots_link}"
            ;;
            none | false )
                eval "${blockbots_remove}"
            ;;
        esac
        unset blockbots_value
    fi

    unset blockbots_link
    unset blockbots_remove
}

nginx_configure_site_cache_client() {
    create_cache_config() {
        if [ -v NGINX_${1}_ENABLE_CLIENT_CACHE ]; then
            client_cache_site_value="$(set -o posix ; set | grep "NGINX_${1}_ENABLE_CLIENT_CACHE" | cut -d = -f 2 | tr ',' '\n')"
            client_cache_prefix="NGINX_${1}_CLIENT_CACHE"
            if [ "${client_cache_site_value,,}" = "unset" ]; then
                return 0
            fi
        else
            client_cache_site_value="$(echo "${NGINX_CLIENT_CACHE,,}" | tr ',' '\n')"
            client_cache_prefix="NGINX_CLIENT_CACHE"
        fi

        for ccc in ${client_cache_site_value,,} ; do
            case "${ccc,,}" in
                * )
                    if [ -v ${client_cache_prefix}_${ccc^^}_EXTENSIONS ] ; then
                        truefalse_onoff ${client_cache_prefix}_${ccc^^}_LOG lowercase;
                        client_cache_types+=$(cat <<EOF

            location ~* \.($(set -o posix ; set | grep "${client_cache_prefix}_${ccc^^}_EXTENSIONS=" | cut -d = -f 2 | sed "s/,/|/g"))$ {
                log_not_found     $(set -o posix ; set | grep "${client_cache_prefix}_${ccc^^}_LOG=" | cut -d = -f 2);
                expires           $(set -o posix ; set | grep "${client_cache_prefix}_${ccc^^}_EXPIRES=" | cut -d = -f 2);
            }

EOF
                                            )
                    fi
                ;;
            esac
        done

        cat << EOF > /etc/nginx/snippets/sites.enabled/${site}/cache-client.conf
${client_cache_types}
EOF
    }

    case "${NGINX_ENABLE_CLIENT_CACHE,,}" in
        all )
            print_info "[configure_site] [${site}] Enabled Client Caching"
            print_debug "[configure_site] [${site}] [client_caching] Using 'all' value"
            call create_cache_config
        ;;
        "${1}" )
            print_info "[configure_site] [${site}] Enabled Client Caching"
            print_debug "[configure_site] [${site}] [client_caching] Using 'site' value"
            call create_cache_config
        ;;
        none | false )
            rm -rf /etc/nginx/snippets/sites.enabled/${site}/cache-client.conf
        ;;
    esac

    if [ -v NGINX_${site^^}_ENABLE_CLIENT_CACHE ] ; then
        local clientcache_value="$(set -o posix ; set | grep "NGINX_${site^^}_ENABLE_CLIENT_CACHE=" | cut -d = -f 2)"
        case "${clientcache_value,,}" in
            true )
                print_info "[configure_site] [${site}] Enabled Client Caching"
                call create_cache_config
            ;;
            none | false )
                rm -rf /etc/nginx/snippets/sites.enabled/${site}/cache-client.conf
            ;;
        esac
        unset clientcache_value
    fi
}

nginx_configure_site_exploit_protection() {
    local exploit_link="ln -sf /etc/nginx/snippets/sites.available/deny-exploit_protection.conf /etc/nginx/snippets/sites.enabled/${1}"
    local exploit_remove="rm -rf /etc/nginx/snippets/sites.enabled/${1}/deny-exploit_protection.conf"

    case "${NGINX_ENABLE_EXPLOIT_PROTECTION,,}" in
        true )
            print_info "[configure_site] [${site}] Enabled Exploit protection"
            print_warn "[configure_site] [${site}] [exploit_protection] Using legacy 'TRUE' value - Convert to 'NGINX_${site^^}_ENABLE_EXPLOIT_PROTECTION'"
            eval "${exploit_link}"
        ;;
        all )
            print_info "[configure_site] [${site}] Enabled Exploit protection"
            print_debug "[configure_site] [${site}] [exploit_protection] Using 'all' value"
            eval "${exploit_link}"
        ;;
        "${1}" )
            print_info "[configure_site] [${site}] Enabled Exploit protection"
            print_debug "[configure_site] [${site}] [exploit_protection] Using 'site' value"
            eval "${exploit_link}"
        ;;
        none | false )
            eval "${exploit_remove}"
        ;;
    esac

    if [ -v NGINX_${site^^}_ENABLE_EXPLOIT_PROTECTION ] ; then
        local exploit_value="$(set -o posix ; set | grep "NGINX_${site^^}_EXPLOIT_PROTECTION=" | cut -d = -f 2)"
        case "${exploit_value,,}" in
            true )
                print_info "[configure_site] [${site}] Enabled Exploit protection"
                eval "${exploit_link}"
            ;;
            none | false )
                eval "${exploit_remove}"
            ;;
        esac
        unset exploit_value
    fi

    unset exploit_link
    unset exploit_remove
}

nginx_configure_site_includes() {
    if [ -v NGINX_INCLUDE_CONFIGURATION ] ; then
        case "${NGINX_INCLUDE_CONFIGURATION}" in
            * )
                print_info "[configure_site] [${site}] Enabled site includes"
                print_warn "[configure_site] [${site}] [site_includes] Deprecated variable NGINX_INCLUDE_CONFIGURATION found! Convert to  NGINX_${site^^}_INCLUDE_CONFIGURATION"
                sed -i "\|### Don't edit past here|a\ \ \ \ \    include ${NGINX_INCLUDE_CONFIGURATION};" "${1}"
            ;;
        esac
    fi

    if [ -v NGINX_${site^^}_INCLUDE_CONFIGURATION ] ; then
        print_info "[configure_site] [${site}] Enabled site includes"
        sed -i "\|### Don't edit past here|a\ \ \ \ \    include $(set -o posix ; set | grep "NGINX_${site^^}_EXPLOIT_PROTECTION=" | cut -d = -f 2)" "${1}"
    fi
}